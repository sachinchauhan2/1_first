{"ast":null,"code":"// import { createReducer, createSlice } from \"@reduxjs/toolkit\"\n// import { updateStatus } from './action'\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nconst initialState = {\n  name: \"Ramesh\",\n  age: 20,\n  status: \"coder\"\n};\nexport const fetchUserName = createAsyncThunk('fetchUser', async () => {\n  const res = await fetch('https://jsonplaceholder.typicode.com/useras');\n  const result = await res.json();\n  return result[Math.floor(Math.random() * 10)].name;\n}); //// # this is old method\n// export default (state = initialState, action) => {\n//     if (action.type === 'UPDATE_AGE') {\n//         return {\n//             ...state,\n//             age: action.payload\n//         }\n//     }\n//     return state\n// }\n// export default createReducer(initialState, (builder) => {\n//     builder.addCase('UPDATE_AGE', (state, action) => {\n//         state.age = action.payload\n//     })\n//     builder.addCase('UPDATE_NAME', (state, action) => {\n//         state.name = action.payload\n//     })\n//     builder.addCase(updateStatus, (state, action) => {\n//         state.status = action.payload\n//     })\n// })\n\nconst userReducer = createSlice({\n  name: 'person',\n  // put  any name it will use internaly no use of this name \n  initialState,\n  reducers: {\n    updateName(state, action) {\n      state.name = action.payload;\n    },\n\n    updateAge(state, action) {\n      state.age = action.payload;\n    },\n\n    updateStatus(state, action) {\n      state.status = action.payload;\n    }\n\n  },\n  extraReducers: {\n    [fetchUserName.fulfilled]: (state, action) => {\n      state.name = action.payload;\n    },\n    [fetchUserName.pendingg]: (state, action) => {\n      state.name = 'loading';\n    },\n    [fetchUserName.rejected]: (state, action) => {\n      state.name = 'try again';\n    }\n  }\n});\nexport const {\n  updateName,\n  updateStatus,\n  updateAge\n} = userReducer.actions;\nexport default userReducer.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","name","age","status","fetchUserName","res","fetch","result","json","Math","floor","random","userReducer","reducers","updateName","state","action","payload","updateAge","updateStatus","extraReducers","fulfilled","pendingg","rejected","actions","reducer"],"sources":["E:/web developnment/1_first/src/userReducer.js"],"sourcesContent":["// import { createReducer, createSlice } from \"@reduxjs/toolkit\"\r\n// import { updateStatus } from './action'\r\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\"\r\n\r\n\r\nconst initialState = {\r\n    name: \"Ramesh\",\r\n    age: 20,\r\n    status: \"coder\"\r\n}\r\n\r\nexport const fetchUserName = createAsyncThunk(\r\n    'fetchUser',\r\n    async() => {\r\n        const res = await fetch('https://jsonplaceholder.typicode.com/useras')\r\n        const result = await res.json()\r\n        return result[Math.floor(Math.random() * 10)].name\r\n    }\r\n)\r\n\r\n\r\n//// # this is old method\r\n// export default (state = initialState, action) => {\r\n//     if (action.type === 'UPDATE_AGE') {\r\n//         return {\r\n//             ...state,\r\n//             age: action.payload\r\n//         }\r\n//     }\r\n//     return state\r\n// }\r\n\r\n\r\n// export default createReducer(initialState, (builder) => {\r\n//     builder.addCase('UPDATE_AGE', (state, action) => {\r\n//         state.age = action.payload\r\n//     })\r\n//     builder.addCase('UPDATE_NAME', (state, action) => {\r\n//         state.name = action.payload\r\n//     })\r\n//     builder.addCase(updateStatus, (state, action) => {\r\n//         state.status = action.payload\r\n//     })\r\n// })\r\n\r\n\r\nconst userReducer = createSlice({\r\n    name: 'person', // put  any name it will use internaly no use of this name \r\n    initialState,\r\n    reducers: {\r\n        updateName(state, action) {\r\n            state.name = action.payload\r\n        },\r\n        updateAge(state, action) {\r\n            state.age = action.payload\r\n        },\r\n        updateStatus(state, action) {\r\n            state.status = action.payload\r\n        },\r\n    },\r\n    extraReducers: {\r\n        [fetchUserName.fulfilled]: (state, action) => {\r\n            state.name = action.payload\r\n        },\r\n        [fetchUserName.pendingg]: (state, action) => {\r\n            state.name = 'loading'\r\n        },\r\n        [fetchUserName.rejected]: (state, action) => {\r\n            state.name = 'try again'\r\n        },\r\n    }\r\n\r\n})\r\n\r\nexport const { updateName, updateStatus, updateAge } = userReducer.actions\r\n\r\nexport default userReducer.reducer"],"mappings":"AAAA;AACA;AACA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AAGA,MAAMC,YAAY,GAAG;EACjBC,IAAI,EAAE,QADW;EAEjBC,GAAG,EAAE,EAFY;EAGjBC,MAAM,EAAE;AAHS,CAArB;AAMA,OAAO,MAAMC,aAAa,GAAGL,gBAAgB,CACzC,WADyC,EAEzC,YAAW;EACP,MAAMM,GAAG,GAAG,MAAMC,KAAK,CAAC,6CAAD,CAAvB;EACA,MAAMC,MAAM,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAArB;EACA,OAAOD,MAAM,CAACE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAD,CAAN,CAAuCV,IAA9C;AACH,CANwC,CAAtC,C,CAUP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,MAAMW,WAAW,GAAGd,WAAW,CAAC;EAC5BG,IAAI,EAAE,QADsB;EACZ;EAChBD,YAF4B;EAG5Ba,QAAQ,EAAE;IACNC,UAAU,CAACC,KAAD,EAAQC,MAAR,EAAgB;MACtBD,KAAK,CAACd,IAAN,GAAae,MAAM,CAACC,OAApB;IACH,CAHK;;IAINC,SAAS,CAACH,KAAD,EAAQC,MAAR,EAAgB;MACrBD,KAAK,CAACb,GAAN,GAAYc,MAAM,CAACC,OAAnB;IACH,CANK;;IAONE,YAAY,CAACJ,KAAD,EAAQC,MAAR,EAAgB;MACxBD,KAAK,CAACZ,MAAN,GAAea,MAAM,CAACC,OAAtB;IACH;;EATK,CAHkB;EAc5BG,aAAa,EAAE;IACX,CAAChB,aAAa,CAACiB,SAAf,GAA2B,CAACN,KAAD,EAAQC,MAAR,KAAmB;MAC1CD,KAAK,CAACd,IAAN,GAAae,MAAM,CAACC,OAApB;IACH,CAHU;IAIX,CAACb,aAAa,CAACkB,QAAf,GAA0B,CAACP,KAAD,EAAQC,MAAR,KAAmB;MACzCD,KAAK,CAACd,IAAN,GAAa,SAAb;IACH,CANU;IAOX,CAACG,aAAa,CAACmB,QAAf,GAA0B,CAACR,KAAD,EAAQC,MAAR,KAAmB;MACzCD,KAAK,CAACd,IAAN,GAAa,WAAb;IACH;EATU;AAda,CAAD,CAA/B;AA4BA,OAAO,MAAM;EAAEa,UAAF;EAAcK,YAAd;EAA4BD;AAA5B,IAA0CN,WAAW,CAACY,OAA5D;AAEP,eAAeZ,WAAW,CAACa,OAA3B"},"metadata":{},"sourceType":"module"}